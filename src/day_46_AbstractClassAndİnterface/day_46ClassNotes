Topic: Abstraction
			Abstract Method
			Abstract class
			Interface

            abstract class vs class
            abstract class vs interface

OOP Encapsulation: hiding the data

OOP Inheritance: creating IS A relation between classes (parent/child  or super/sub)

		method overriding: giving different implementation to the method

Abstraction: What to do, instead of How to do
             Focusing on the essentials without worrying about the small details(implementations) of the method

interface: blueprint of class
		   specifies what the class(es) must have
		   can not be instantiated
		   can not be final

		   to provide additional methods that any class needs


		   What interface can have?
		   		variables:final static variables ONLY

		   		methods: abstract method, default method, static method

		   		Access modifier: public ONLY

		   what interface can not have?
		   		Instance variable
		   		Instance methods
		   		Constructor
		   		Blocks
		   		private, default, protected access modifiers

		   why we need interface?
		   		one class can extend one class ONLY
		   		one class can implements multiple interfaces
		   			(Multiple inheritance is allowed)

		   		100% abstraction

Abstract class vs interface:  both are used for achieving abstraction
							  both can not be instantiated
							  both can not be final
							  both are meant to be inherited


		  	abstract class: one class can extends one abstract class

		  					can have instances & static blocks

		  					can have constructor

		  					4 access modofiers

		  	interface: one class can implement multiple interfaces

                       Access modifier: public ONLY



extends vs implements: both are used for inheritance

		extends:
				class extends class
				interface extends interface(s)

		implements:
				class implements interface(s)


		extends & implements:
				extends first then implements

abstract class Device{
	turnOff();
}


abstract class Phone extends Device{
	call();
}


class Iphone extends Phone{

    turnOff(){
    Steps to turn off the phone...
    }
    call(){
    steps to make a call ...
    }

}


--------------------------------------------------
Car Task:
	abstract Car:
		make, model, color, year, price....
		start();
		stop()

	Honda extends Car:
		start(): twist the key to start

	Audi extends Car:
		start(): push the start button

	Tesla extends Car:
		start(): Say "Start"






--------------------------------------------------
/*Animal task:


       		Create an abstract class named Animal:
        			Variables:
        			name, breed(final), gender(final),  age, size, color(final)

        			Encapsulate all the fields

        			Add a constructor that can set all the fields

        			Methods:
        				eat(); ==> different animals eat different foods
        				drink() ==> all the animals drink water
        				toString() ==> to display the full info of the animal
*/


        		Create the following subclasses of Animal:
        				Dog
        					eat(): eats bones

        				Cat
        					eat(): eats liver

        				Tiger
        					eat(): eats deer

        				Parrot
        					eat(): eats sunflower seeds

        				Eagle
        					eat(): eats snake












